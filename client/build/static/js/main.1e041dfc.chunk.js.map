{"version":3,"sources":["components/modal/modal.js","config.js","pages/Chat.js","App.js","serviceWorker.js","index.js"],"names":["Modal","_ref","handleClose","show","children","react_default","a","createElement","className","onClick","endpoint","Component","props","_useState","useState","_useState2","Object","slicedToArray","setShow","_useState3","user_id","bio","_useState4","selectedUser","setSelectedUser","_useState5","_useState6","post","setPost","_useState7","_useState8","messages","setMessages","_useState9","_useState10","users","setUsers","_useState11","io","socket","_getUser","asyncToGenerator","regenerator_default","mark","_callee","userId","response","body","wrap","_context","prev","next","fetch","concat","sent","json","status","Error","message","abrupt","stop","apply","this","arguments","_handleSubmit","_callee2","e","_context2","preventDefault","emit","name","timestamp","Date","toISOString","useEffect","_x","getUser","then","res","push","catch","err","console","log","on","key","Math","random","toString","substr","currentMessages","toConsumableArray","close","modal_modal","id","align","map","src","find","x","avatar","alt","user","showModal","onSubmit","_x2","type","value","onChange","target","App","es","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"0VAceA,SAXD,SAAAC,GAAqC,IAAlCC,EAAkCD,EAAlCC,YAAaC,EAAqBF,EAArBE,KAAMC,EAAeH,EAAfG,SAClC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,EAAO,sBAAwB,sBAC7CE,EAAAC,EAAAC,cAAA,WAASC,UAAU,cAChBJ,EACDC,EAAAC,EAAAC,cAAA,UAAQE,QAASP,GAAjB,8BCPKQ,EAAQ,kCCKN,SAASC,EAAUC,GAAO,IAAAC,EACfC,oBAAS,GADMC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAChCV,EADgCY,EAAA,GAC1BG,EAD0BH,EAAA,GAAAI,EAECL,mBAAS,CAAEM,QAAS,GAAIC,IAAK,KAF9BC,EAAAN,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAEhCI,EAFgCD,EAAA,GAElBE,EAFkBF,EAAA,GAAAG,EAGfX,mBAAS,IAHMY,EAAAV,OAAAC,EAAA,EAAAD,CAAAS,EAAA,GAGhCE,EAHgCD,EAAA,GAG1BE,EAH0BF,EAAA,GAAAG,EAIPf,mBAAS,IAJFgB,EAAAd,OAAAC,EAAA,EAAAD,CAAAa,EAAA,GAIhCE,EAJgCD,EAAA,GAItBE,EAJsBF,EAAA,GAAAG,EAKbnB,mBAAS,IALIoB,EAAAlB,OAAAC,EAAA,EAAAD,CAAAiB,EAAA,GAKhCE,EALgCD,EAAA,GAKzBE,EALyBF,EAAA,GAAAG,EAMtBvB,mBAASwB,IAAG5B,IAAtB6B,EANgCvB,OAAAC,EAAA,EAAAD,CAAAqB,EAAA,eAAAG,IAAA,OAAAA,EAAAxB,OAAAyB,EAAA,EAAAzB,CAAA0B,EAAApC,EAAAqC,KAgDvC,SAAAC,EAAuBC,GAAvB,IAAAC,EAAAC,EAAA,OAAAL,EAAApC,EAAA0C,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACyBC,MAAK,SAAAC,OAAUR,IADxC,cACQC,EADRG,EAAAK,KAAAL,EAAAE,KAAA,EAEqBL,EAASS,OAF9B,UAEQR,EAFRE,EAAAK,KAG0B,MAApBR,EAASU,OAHf,CAAAP,EAAAE,KAAA,cAGqCM,MAAMV,EAAKW,SAHhD,cAAAT,EAAAU,OAAA,SAISZ,GAJT,wBAAAE,EAAAW,SAAAhB,OAhDuCiB,MAAAC,KAAAC,WAAA,SAAAC,IAAA,OAAAA,EAAAhD,OAAAyB,EAAA,EAAAzB,CAAA0B,EAAApC,EAAAqC,KAsDvC,SAAAsB,EAA4BC,GAA5B,OAAAxB,EAAApC,EAAA0C,KAAA,SAAAmB,GAAA,cAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,OACEe,EAAEE,iBACF7B,EAAO8B,KAAK,OAAQ,CAClBC,KAAM,OACNZ,QAAS/B,EACT4C,WAAW,IAAIC,MAAOC,cACtBrD,QAAS,IAEXQ,EAAQ,IARV,wBAAAuC,EAAAP,SAAAK,OAtDuCJ,MAAAC,KAAAC,WAiEvC,OA3CAW,oBAAU,YAtB6B,SAAAC,GAAA,OAAAnC,EAAAqB,MAAAC,KAAAC,YAuBrCa,CAAQ,GACLC,KAAK,SAAAC,GAAG,OACP1C,EAAS,WAEP,OADAD,EAAM4C,KAAKD,GACJ3C,MAGV6C,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAC3B,IAEHP,oBAAU,WASR,OARAnC,EAAO6C,GAAG,OAAQ,SAAS1B,GACzBA,EAAQ2B,IACN,IACAC,KAAKC,SACFC,SAAS,IACTC,OAAO,EAAG,GACfzD,EAAY,SAAA0D,GAAe,SAAArC,OAAArC,OAAA2E,EAAA,EAAA3E,CAAQ0E,GAAR,CAAyBhC,QAE/C,kBAAMnB,EAAOqD,MAAM7D,KACzB,IAuBD1B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsF,EAAD,CAAO1F,KAAMA,EAAMD,YAjDvB,WACEgB,GAAQ,KAiDJb,EAAAC,EAAAC,cAAA,sBAAcgB,EAAauE,IAC3BzF,EAAAC,EAAAC,cAAA,iBAASgB,EAAaF,MAExBhB,EAAAC,EAAAC,cAAA,SAAOwF,MAAM,UACX1F,EAAAC,EAAAC,cAAA,aACGwB,EAASiE,IAAI,SAAAtC,GAAO,OACnBrD,EAAAC,EAAAC,cAAA,MAAI8E,IAAK3B,EAAQ2B,KACfhF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACZH,EAAAC,EAAAC,cAAA,OACEC,UAAU,SACVyF,KAtEGpD,EAsEYa,EAAQtC,QArE9Be,EAAM+D,KAAK,SAAAC,GAAC,OAAIA,EAAEL,KAAOjD,IAAQuD,QAsE1BC,IAAI,SACJ5F,QAAS,kBApEzB,SAAmBoC,GACjB,IAAMyD,EAAOnE,EAAM+D,KAAK,SAAAC,GAAC,OAAIA,EAAEL,KAAOjD,IACtCrB,EAAgB8E,GAChBpF,GAAQ,GAiEqBqF,CAAU7C,EAAQtC,aAGrCf,EAAAC,EAAAC,cAAA,UAAKmD,EAAQA,UA3EzB,IAAmBb,MAgFfxC,EAAAC,EAAAC,cAAA,QAAMiG,SAxF6B,SAAAC,GAAA,OAAAzC,EAAAH,MAAAC,KAAAC,aAyFjC1D,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,kCAEFF,EAAAC,EAAAC,cAAA,SACEmG,KAAK,OACLC,MAAOhF,EACPiF,SAAU,SAAA1C,GAAC,OAAItC,EAAQsC,EAAE2C,OAAOF,UAElCtG,EAAAC,EAAAC,cAAA,UAAQmG,KAAK,UAAb,wBCtFOI,mLAVX,OACEzG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACwG,EAAA,EAAD,KACE1G,EAAAC,EAAAC,cAACI,EAAD,CAAMqG,KAAK,eALHrG,aCOZsG,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT3C,KAAK,SAAAgD,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BjD,QAAQC,IACN,iHAKEsC,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlB3C,QAAQC,IAAI,sCAGRsC,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,UAO5B7C,MAAM,SAAAsD,GACLpD,QAAQoD,MAAM,4CAA6CA,KC1FjEC,IAASC,OAAOnI,EAAAC,EAAAC,cAACkI,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,GAAwB1B,OAAOC,SAAS0B,MACpDC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,OAAQ,WAC9B,IAAMxB,EAAK,GAAAnE,OAAMwF,GAAN,UAEP5B,GAgEV,SAAiCO,EAAOC,GAEtCrE,MAAMoE,GACH3C,KAAK,SAAA/B,GAEJ,IAAMmG,EAAcnG,EAASoG,QAAQC,IAAI,gBAEnB,MAApBrG,EAASU,QACO,MAAfyF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C1B,UAAUC,cAAc0B,MAAMxE,KAAK,SAAAgD,GACjCA,EAAayB,aAAazE,KAAK,WAC7BsC,OAAOC,SAASmC,aAKpBhC,EAAgBC,EAAOC,KAG1BzC,MAAM,WACLE,QAAQC,IACN,mEArFAqE,CAAwBhC,EAAOC,GAI/BC,UAAUC,cAAc0B,MAAMxE,KAAK,WACjCK,QAAQC,IACN,gHAMJoC,EAAgBC,EAAOC,MCvC/BE","file":"static/js/main.1e041dfc.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./modal.css\";\n\nconst Modal = ({ handleClose, show, children }) => {\n  return (\n    <div className={show ? \"modal display-block\" : \"modal display-none\"}>\n      <section className=\"modal-main\">\n        {children}\n        <button onClick={handleClose}>close</button>\n      </section>\n    </div>\n  );\n};\n\nexport default Modal\n","// This is client side config only - don't put anything in here that shouldn't be public!\r\nexport const endpoint = `https://mivechat.herokuapp.com/`;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Modal from \"../components/modal/modal\";\r\nimport io from \"socket.io-client\";\r\nimport { endpoint } from \"../config\";\r\n//import Chatbox from \"./components/chatbox/chatbox\";\r\n\r\nexport default function Component(props) {\r\n  const [show, setShow] = useState(false);\r\n  const [selectedUser, setSelectedUser] = useState({ user_id: \"\", bio: \"\" });\r\n  const [post, setPost] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const [socket] = useState(io(endpoint));\r\n\r\n  function getAvatar(userId) {\r\n    return users.find(x => x.id === userId).avatar;\r\n  }\r\n\r\n  function showModal(userId) {\r\n    const user = users.find(x => x.id === userId);\r\n    setSelectedUser(user);\r\n    setShow(true);\r\n  }\r\n\r\n  function hideModal() {\r\n    setShow(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    getUser(1)\r\n      .then(res =>\r\n        setUsers(() => {\r\n          users.push(res);\r\n          return users;\r\n        })\r\n      )\r\n      .catch(err => console.log(err));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"chat\", function(message) {\r\n      message.key =\r\n        \"_\" +\r\n        Math.random()\r\n          .toString(36)\r\n          .substr(2, 9);\r\n      setMessages(currentMessages => [...currentMessages, message]);\r\n    });\r\n    return () => socket.close(messages);\r\n  }, []);\r\n\r\n  //TODO: On new message check if we have the user data if not then fetch it and store it locally\r\n  //const a = this.state.users.find(x => x.id === message.user_id);\r\n\r\n  async function getUser(userId) {\r\n    const response = await fetch(`/user/${userId}`);\r\n    const body = await response.json();\r\n    if (response.status !== 200) throw Error(body.message);\r\n    return body;\r\n  }\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n    socket.emit(\"chat\", {\r\n      name: \"chat\",\r\n      message: post,\r\n      timestamp: new Date().toISOString(),\r\n      user_id: 1\r\n    });\r\n    setPost(\"\");\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Modal show={show} handleClose={hideModal}>\r\n        <p>USERNAME: {selectedUser.id}</p>\r\n        <p>BIO: {selectedUser.bio}</p>\r\n      </Modal>\r\n      <table align=\"center\">\r\n        <tbody>\r\n          {messages.map(message => (\r\n            <tr key={message.key}>\r\n              <td className=\"name-column\">\r\n                <img\r\n                  className=\"avatar\"\r\n                  src={getAvatar(message.user_id)}\r\n                  alt=\"avatar\"\r\n                  onClick={() => showModal(message.user_id)}\r\n                />\r\n              </td>\r\n              <td>{message.message}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <form onSubmit={handleSubmit}>\r\n        <p>\r\n          <strong>Post to Server:</strong>\r\n        </p>\r\n        <input\r\n          type=\"text\"\r\n          value={post}\r\n          onChange={e => setPost(e.target.value)}\r\n        />\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Chat from \"./pages/Chat\";\nimport { Router } from \"@reach/router\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <Chat path=\"/\" />\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}